{"ast":null,"code":"import { THRESHOLDS } from './constants';\nexport const getLatestPodData = pods => {\n  // Get latest data per pod (similar to getCitySummaries logic)\n  const latestPods = [];\n  const podMap = new Map();\n  pods.forEach(pod => {\n    const key = pod.pod_id;\n    if (!podMap.has(key) || new Date(pod.date) > new Date(podMap.get(key).date)) {\n      podMap.set(key, pod);\n    }\n  });\n  podMap.forEach(pod => latestPods.push(pod));\n  return latestPods;\n};\nexport const getPodTrend = (pods, podId) => {\n  return pods.filter(pod => pod.pod_id === podId).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()).slice(0, 7);\n};\nexport const isMetricBreached = (metric, value) => {\n  return metric === 'o2har' ? value > THRESHOLDS.O2HAR : value > THRESHOLDS.UNSERVICEABILITY;\n};\nexport const getStatusColor = pod => {\n  const o2harBreached = isMetricBreached('o2har', pod.o2har);\n  const unserviceabilityBreached = isMetricBreached('unserviceability', pod.unserviceability);\n  return o2harBreached || unserviceabilityBreached ? 'bg-error-500' : 'bg-success-500';\n};\nexport const getCitySummaries = podsData => {\n  // Get latest data per pod\n  const latestPods = [];\n  const podMap = new Map();\n  podsData.forEach(pod => {\n    const key = pod.pod_id;\n    if (!podMap.has(key) || new Date(pod.date) > new Date(podMap.get(key).date)) {\n      podMap.set(key, pod);\n    }\n  });\n  podMap.forEach(pod => latestPods.push(pod));\n\n  // Group by city\n  const cityMap = new Map();\n  latestPods.forEach(pod => {\n    if (!cityMap.has(pod.city)) {\n      cityMap.set(pod.city, {\n        city: pod.city,\n        o2har: 0,\n        unserviceability: 0,\n        totalPods: 0,\n        breachedPods: 0,\n        lastUpdated: pod.date,\n        owner: {\n          name: pod.city_owner_name,\n          email: pod.city_owner_email\n        }\n      });\n    }\n    const city = cityMap.get(pod.city);\n    city.o2har += pod.o2har;\n    city.unserviceability += pod.unserviceability;\n    city.totalPods += 1;\n    if (pod.o2har > THRESHOLDS.O2HAR || pod.unserviceability > THRESHOLDS.UNSERVICEABILITY) {\n      city.breachedPods += 1;\n    }\n    if (new Date(pod.date) > new Date(city.lastUpdated)) {\n      city.lastUpdated = pod.date;\n    }\n  });\n\n  // Average metrics\n  cityMap.forEach(city => {\n    city.o2har = city.o2har / city.totalPods;\n    city.unserviceability = city.unserviceability / city.totalPods;\n  });\n  return Array.from(cityMap.values());\n};\nexport const mockPromptQLResponse = question => {\n  const responses = [\"Based on the current metrics, I recommend increasing DE allocation by 20% for this pod.\", \"The O2HAR threshold breach suggests we need to implement surge pricing immediately.\", \"Consider calling additional part-time DEs to address the current shortage.\", \"Traffic conditions are affecting delivery times. Suggest alternative routes to DEs.\", \"The unserviceability rate indicates we need to optimize the delivery radius.\"];\n  return responses[Math.floor(Math.random() * responses.length)];\n};","map":{"version":3,"names":["THRESHOLDS","getLatestPodData","pods","latestPods","podMap","Map","forEach","pod","key","pod_id","has","Date","date","get","set","push","getPodTrend","podId","filter","sort","a","b","getTime","slice","isMetricBreached","metric","value","O2HAR","UNSERVICEABILITY","getStatusColor","o2harBreached","o2har","unserviceabilityBreached","unserviceability","getCitySummaries","podsData","cityMap","city","totalPods","breachedPods","lastUpdated","owner","name","city_owner_name","email","city_owner_email","Array","from","values","mockPromptQLResponse","question","responses","Math","floor","random","length"],"sources":["C:/Users/scar/Downloads/cursor/src/utils/helpers.ts"],"sourcesContent":["import { PodData, CitySummary } from '../types';\r\nimport { THRESHOLDS } from './constants';\r\n\r\nexport const getLatestPodData = (pods: PodData[]): PodData[] => {\r\n  // Get latest data per pod (similar to getCitySummaries logic)\r\n  const latestPods: PodData[] = [];\r\n  const podMap = new Map<string, PodData>();\r\n  \r\n  pods.forEach(pod => {\r\n    const key = pod.pod_id;\r\n    if (!podMap.has(key) || new Date(pod.date) > new Date(podMap.get(key)!.date)) {\r\n      podMap.set(key, pod);\r\n    }\r\n  });\r\n  \r\n  podMap.forEach(pod => latestPods.push(pod));\r\n  \r\n  return latestPods;\r\n};\r\n\r\nexport const getPodTrend = (pods: PodData[], podId: string): PodData[] => {\r\n  return pods\r\n    .filter(pod => pod.pod_id === podId)\r\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\r\n    .slice(0, 7);\r\n};\r\n\r\nexport const isMetricBreached = (metric: 'o2har' | 'unserviceability', value: number): boolean => {\r\n  return metric === 'o2har' ? value > THRESHOLDS.O2HAR : value > THRESHOLDS.UNSERVICEABILITY;\r\n};\r\n\r\nexport const getStatusColor = (pod: PodData): string => {\r\n  const o2harBreached = isMetricBreached('o2har', pod.o2har);\r\n  const unserviceabilityBreached = isMetricBreached('unserviceability', pod.unserviceability);\r\n  \r\n  return (o2harBreached || unserviceabilityBreached) ? 'bg-error-500' : 'bg-success-500';\r\n};\r\n\r\nexport const getCitySummaries = (podsData: PodData[]): CitySummary[] => {\r\n  // Get latest data per pod\r\n  const latestPods: PodData[] = [];\r\n  const podMap = new Map<string, PodData>();\r\n  \r\n  podsData.forEach(pod => {\r\n    const key = pod.pod_id;\r\n    if (!podMap.has(key) || new Date(pod.date) > new Date(podMap.get(key)!.date)) {\r\n      podMap.set(key, pod);\r\n    }\r\n  });\r\n  \r\n  podMap.forEach(pod => latestPods.push(pod));\r\n  \r\n  // Group by city\r\n  const cityMap = new Map<string, CitySummary>();\r\n  \r\n  latestPods.forEach(pod => {\r\n    if (!cityMap.has(pod.city)) {\r\n      cityMap.set(pod.city, {\r\n        city: pod.city,\r\n        o2har: 0,\r\n        unserviceability: 0,\r\n        totalPods: 0,\r\n        breachedPods: 0,\r\n        lastUpdated: pod.date,\r\n        owner: {\r\n          name: pod.city_owner_name,\r\n          email: pod.city_owner_email,\r\n        },\r\n      });\r\n    }\r\n    \r\n    const city = cityMap.get(pod.city)!;\r\n    city.o2har += pod.o2har;\r\n    city.unserviceability += pod.unserviceability;\r\n    city.totalPods += 1;\r\n    \r\n    if (pod.o2har > THRESHOLDS.O2HAR || pod.unserviceability > THRESHOLDS.UNSERVICEABILITY) {\r\n      city.breachedPods += 1;\r\n    }\r\n    \r\n    if (new Date(pod.date) > new Date(city.lastUpdated)) {\r\n      city.lastUpdated = pod.date;\r\n    }\r\n  });\r\n  \r\n  // Average metrics\r\n  cityMap.forEach(city => {\r\n    city.o2har = city.o2har / city.totalPods;\r\n    city.unserviceability = city.unserviceability / city.totalPods;\r\n  });\r\n  \r\n  return Array.from(cityMap.values());\r\n};\r\n\r\nexport const mockPromptQLResponse = (question: string): string => {\r\n  const responses = [\r\n    \"Based on the current metrics, I recommend increasing DE allocation by 20% for this pod.\",\r\n    \"The O2HAR threshold breach suggests we need to implement surge pricing immediately.\",\r\n    \"Consider calling additional part-time DEs to address the current shortage.\",\r\n    \"Traffic conditions are affecting delivery times. Suggest alternative routes to DEs.\",\r\n    \"The unserviceability rate indicates we need to optimize the delivery radius.\",\r\n  ];\r\n  \r\n  return responses[Math.floor(Math.random() * responses.length)];\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}