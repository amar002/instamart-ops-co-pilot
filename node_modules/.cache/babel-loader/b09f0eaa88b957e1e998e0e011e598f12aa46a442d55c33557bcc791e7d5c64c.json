{"ast":null,"code":"import{THRESHOLDS}from'./constants';export const getLatestPodData=pods=>{const latestDate=new Date(Math.max(...pods.map(pod=>new Date(pod.date).getTime())));const latestDateStr=latestDate.toISOString().split('T')[0];return pods.filter(pod=>pod.date===latestDateStr);};export const getPodTrend=(pods,podId)=>{return pods.filter(pod=>pod.pod_id===podId).sort((a,b)=>new Date(b.date).getTime()-new Date(a.date).getTime()).slice(0,7);};export const isMetricBreached=(metric,value)=>{const threshold=metric==='o2har'?THRESHOLDS.O2HAR:THRESHOLDS.UNSERVICEABILITY;return value>threshold;};export const getStatusColor=pod=>{const o2harBreached=isMetricBreached('o2har',pod.o2har);const unserviceabilityBreached=isMetricBreached('unserviceability',pod.unserviceability);return o2harBreached||unserviceabilityBreached?'bg-instamart-red':'bg-instamart-green';};export const mockPromptQLResponse=question=>{const responses=[\"Based on the current metrics, I recommend increasing DE allocation by 20% for this pod.\",\"The O2HAR threshold breach suggests we need to implement surge pricing immediately.\",\"Consider calling additional part-time DEs to address the current shortage.\",\"Traffic conditions are affecting delivery times. Suggest alternative routes to DEs.\",\"The unserviceability rate indicates we need to optimize the delivery radius.\"];return responses[Math.floor(Math.random()*responses.length)];};","map":{"version":3,"names":["THRESHOLDS","getLatestPodData","pods","latestDate","Date","Math","max","map","pod","date","getTime","latestDateStr","toISOString","split","filter","getPodTrend","podId","pod_id","sort","a","b","slice","isMetricBreached","metric","value","threshold","O2HAR","UNSERVICEABILITY","getStatusColor","o2harBreached","o2har","unserviceabilityBreached","unserviceability","mockPromptQLResponse","question","responses","floor","random","length"],"sources":["C:/Users/scar/Downloads/cursor/src/utils/helpers.ts"],"sourcesContent":["import { PodData } from '../types';\r\nimport { THRESHOLDS } from './constants';\r\n\r\nexport const getLatestPodData = (pods: PodData[]): PodData[] => {\r\n  const latestDate = new Date(Math.max(...pods.map(pod => new Date(pod.date).getTime())));\r\n  const latestDateStr = latestDate.toISOString().split('T')[0];\r\n  \r\n  return pods.filter(pod => pod.date === latestDateStr);\r\n};\r\n\r\nexport const getPodTrend = (pods: PodData[], podId: string): PodData[] => {\r\n  return pods\r\n    .filter(pod => pod.pod_id === podId)\r\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\r\n    .slice(0, 7);\r\n};\r\n\r\nexport const isMetricBreached = (metric: 'o2har' | 'unserviceability', value: number): boolean => {\r\n  const threshold = metric === 'o2har' ? THRESHOLDS.O2HAR : THRESHOLDS.UNSERVICEABILITY;\r\n  return value > threshold;\r\n};\r\n\r\nexport const getStatusColor = (pod: PodData): string => {\r\n  const o2harBreached = isMetricBreached('o2har', pod.o2har);\r\n  const unserviceabilityBreached = isMetricBreached('unserviceability', pod.unserviceability);\r\n  \r\n  return (o2harBreached || unserviceabilityBreached) ? 'bg-instamart-red' : 'bg-instamart-green';\r\n};\r\n\r\nexport const mockPromptQLResponse = (question: string): string => {\r\n  const responses = [\r\n    \"Based on the current metrics, I recommend increasing DE allocation by 20% for this pod.\",\r\n    \"The O2HAR threshold breach suggests we need to implement surge pricing immediately.\",\r\n    \"Consider calling additional part-time DEs to address the current shortage.\",\r\n    \"Traffic conditions are affecting delivery times. Suggest alternative routes to DEs.\",\r\n    \"The unserviceability rate indicates we need to optimize the delivery radius.\",\r\n  ];\r\n  \r\n  return responses[Math.floor(Math.random() * responses.length)];\r\n}; "],"mappings":"AACA,OAASA,UAAU,KAAQ,aAAa,CAExC,MAAO,MAAM,CAAAC,gBAAgB,CAAIC,IAAe,EAAgB,CAC9D,KAAM,CAAAC,UAAU,CAAG,GAAI,CAAAC,IAAI,CAACC,IAAI,CAACC,GAAG,CAAC,GAAGJ,IAAI,CAACK,GAAG,CAACC,GAAG,EAAI,GAAI,CAAAJ,IAAI,CAACI,GAAG,CAACC,IAAI,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CACvF,KAAM,CAAAC,aAAa,CAAGR,UAAU,CAACS,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAE5D,MAAO,CAAAX,IAAI,CAACY,MAAM,CAACN,GAAG,EAAIA,GAAG,CAACC,IAAI,GAAKE,aAAa,CAAC,CACvD,CAAC,CAED,MAAO,MAAM,CAAAI,WAAW,CAAGA,CAACb,IAAe,CAAEc,KAAa,GAAgB,CACxE,MAAO,CAAAd,IAAI,CACRY,MAAM,CAACN,GAAG,EAAIA,GAAG,CAACS,MAAM,GAAKD,KAAK,CAAC,CACnCE,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAK,GAAI,CAAAhB,IAAI,CAACgB,CAAC,CAACX,IAAI,CAAC,CAACC,OAAO,CAAC,CAAC,CAAG,GAAI,CAAAN,IAAI,CAACe,CAAC,CAACV,IAAI,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CACvEW,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAChB,CAAC,CAED,MAAO,MAAM,CAAAC,gBAAgB,CAAGA,CAACC,MAAoC,CAAEC,KAAa,GAAc,CAChG,KAAM,CAAAC,SAAS,CAAGF,MAAM,GAAK,OAAO,CAAGvB,UAAU,CAAC0B,KAAK,CAAG1B,UAAU,CAAC2B,gBAAgB,CACrF,MAAO,CAAAH,KAAK,CAAGC,SAAS,CAC1B,CAAC,CAED,MAAO,MAAM,CAAAG,cAAc,CAAIpB,GAAY,EAAa,CACtD,KAAM,CAAAqB,aAAa,CAAGP,gBAAgB,CAAC,OAAO,CAAEd,GAAG,CAACsB,KAAK,CAAC,CAC1D,KAAM,CAAAC,wBAAwB,CAAGT,gBAAgB,CAAC,kBAAkB,CAAEd,GAAG,CAACwB,gBAAgB,CAAC,CAE3F,MAAQ,CAAAH,aAAa,EAAIE,wBAAwB,CAAI,kBAAkB,CAAG,oBAAoB,CAChG,CAAC,CAED,MAAO,MAAM,CAAAE,oBAAoB,CAAIC,QAAgB,EAAa,CAChE,KAAM,CAAAC,SAAS,CAAG,CAChB,yFAAyF,CACzF,qFAAqF,CACrF,4EAA4E,CAC5E,qFAAqF,CACrF,8EAA8E,CAC/E,CAED,MAAO,CAAAA,SAAS,CAAC9B,IAAI,CAAC+B,KAAK,CAAC/B,IAAI,CAACgC,MAAM,CAAC,CAAC,CAAGF,SAAS,CAACG,MAAM,CAAC,CAAC,CAChE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}