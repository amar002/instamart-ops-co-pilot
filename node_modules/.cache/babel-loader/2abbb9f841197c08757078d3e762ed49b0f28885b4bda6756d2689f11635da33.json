{"ast":null,"code":"import { THRESHOLDS } from './constants';\nexport const getLatestPodData = pods => {\n  const latestDate = new Date(Math.max(...pods.map(pod => new Date(pod.date).getTime())));\n  const latestDateStr = latestDate.toISOString().split('T')[0];\n  return pods.filter(pod => pod.date === latestDateStr);\n};\nexport const getPodTrend = (pods, podId) => {\n  return pods.filter(pod => pod.pod_id === podId).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()).slice(0, 7);\n};\nexport const isMetricBreached = (metric, value) => {\n  const threshold = metric === 'o2har' ? THRESHOLDS.O2HAR : THRESHOLDS.UNSERVICEABILITY;\n  return value > threshold;\n};\nexport const getStatusColor = pod => {\n  const o2harBreached = isMetricBreached('o2har', pod.o2har);\n  const unserviceabilityBreached = isMetricBreached('unserviceability', pod.unserviceability);\n  return o2harBreached || unserviceabilityBreached ? 'bg-instamart-red' : 'bg-instamart-green';\n};\nexport const mockPromptQLResponse = question => {\n  const responses = [\"Based on the current metrics, I recommend increasing DE allocation by 20% for this pod.\", \"The O2HAR threshold breach suggests we need to implement surge pricing immediately.\", \"Consider calling additional part-time DEs to address the current shortage.\", \"Traffic conditions are affecting delivery times. Suggest alternative routes to DEs.\", \"The unserviceability rate indicates we need to optimize the delivery radius.\"];\n  return responses[Math.floor(Math.random() * responses.length)];\n};","map":{"version":3,"names":["THRESHOLDS","getLatestPodData","pods","latestDate","Date","Math","max","map","pod","date","getTime","latestDateStr","toISOString","split","filter","getPodTrend","podId","pod_id","sort","a","b","slice","isMetricBreached","metric","value","threshold","O2HAR","UNSERVICEABILITY","getStatusColor","o2harBreached","o2har","unserviceabilityBreached","unserviceability","mockPromptQLResponse","question","responses","floor","random","length"],"sources":["C:/Users/scar/Downloads/cursor/src/utils/helpers.ts"],"sourcesContent":["import { PodData } from '../types';\r\nimport { THRESHOLDS } from './constants';\r\n\r\nexport const getLatestPodData = (pods: PodData[]): PodData[] => {\r\n  const latestDate = new Date(Math.max(...pods.map(pod => new Date(pod.date).getTime())));\r\n  const latestDateStr = latestDate.toISOString().split('T')[0];\r\n  \r\n  return pods.filter(pod => pod.date === latestDateStr);\r\n};\r\n\r\nexport const getPodTrend = (pods: PodData[], podId: string): PodData[] => {\r\n  return pods\r\n    .filter(pod => pod.pod_id === podId)\r\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\r\n    .slice(0, 7);\r\n};\r\n\r\nexport const isMetricBreached = (metric: 'o2har' | 'unserviceability', value: number): boolean => {\r\n  const threshold = metric === 'o2har' ? THRESHOLDS.O2HAR : THRESHOLDS.UNSERVICEABILITY;\r\n  return value > threshold;\r\n};\r\n\r\nexport const getStatusColor = (pod: PodData): string => {\r\n  const o2harBreached = isMetricBreached('o2har', pod.o2har);\r\n  const unserviceabilityBreached = isMetricBreached('unserviceability', pod.unserviceability);\r\n  \r\n  return (o2harBreached || unserviceabilityBreached) ? 'bg-instamart-red' : 'bg-instamart-green';\r\n};\r\n\r\nexport const mockPromptQLResponse = (question: string): string => {\r\n  const responses = [\r\n    \"Based on the current metrics, I recommend increasing DE allocation by 20% for this pod.\",\r\n    \"The O2HAR threshold breach suggests we need to implement surge pricing immediately.\",\r\n    \"Consider calling additional part-time DEs to address the current shortage.\",\r\n    \"Traffic conditions are affecting delivery times. Suggest alternative routes to DEs.\",\r\n    \"The unserviceability rate indicates we need to optimize the delivery radius.\",\r\n  ];\r\n  \r\n  return responses[Math.floor(Math.random() * responses.length)];\r\n}; "],"mappings":"AACA,SAASA,UAAU,QAAQ,aAAa;AAExC,OAAO,MAAMC,gBAAgB,GAAIC,IAAe,IAAgB;EAC9D,MAAMC,UAAU,GAAG,IAAIC,IAAI,CAACC,IAAI,CAACC,GAAG,CAAC,GAAGJ,IAAI,CAACK,GAAG,CAACC,GAAG,IAAI,IAAIJ,IAAI,CAACI,GAAG,CAACC,IAAI,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;EACvF,MAAMC,aAAa,GAAGR,UAAU,CAACS,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAE5D,OAAOX,IAAI,CAACY,MAAM,CAACN,GAAG,IAAIA,GAAG,CAACC,IAAI,KAAKE,aAAa,CAAC;AACvD,CAAC;AAED,OAAO,MAAMI,WAAW,GAAGA,CAACb,IAAe,EAAEc,KAAa,KAAgB;EACxE,OAAOd,IAAI,CACRY,MAAM,CAACN,GAAG,IAAIA,GAAG,CAACS,MAAM,KAAKD,KAAK,CAAC,CACnCE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIhB,IAAI,CAACgB,CAAC,CAACX,IAAI,CAAC,CAACC,OAAO,CAAC,CAAC,GAAG,IAAIN,IAAI,CAACe,CAAC,CAACV,IAAI,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CACvEW,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;AAChB,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,MAAoC,EAAEC,KAAa,KAAc;EAChG,MAAMC,SAAS,GAAGF,MAAM,KAAK,OAAO,GAAGvB,UAAU,CAAC0B,KAAK,GAAG1B,UAAU,CAAC2B,gBAAgB;EACrF,OAAOH,KAAK,GAAGC,SAAS;AAC1B,CAAC;AAED,OAAO,MAAMG,cAAc,GAAIpB,GAAY,IAAa;EACtD,MAAMqB,aAAa,GAAGP,gBAAgB,CAAC,OAAO,EAAEd,GAAG,CAACsB,KAAK,CAAC;EAC1D,MAAMC,wBAAwB,GAAGT,gBAAgB,CAAC,kBAAkB,EAAEd,GAAG,CAACwB,gBAAgB,CAAC;EAE3F,OAAQH,aAAa,IAAIE,wBAAwB,GAAI,kBAAkB,GAAG,oBAAoB;AAChG,CAAC;AAED,OAAO,MAAME,oBAAoB,GAAIC,QAAgB,IAAa;EAChE,MAAMC,SAAS,GAAG,CAChB,yFAAyF,EACzF,qFAAqF,EACrF,4EAA4E,EAC5E,qFAAqF,EACrF,8EAA8E,CAC/E;EAED,OAAOA,SAAS,CAAC9B,IAAI,CAAC+B,KAAK,CAAC/B,IAAI,CAACgC,MAAM,CAAC,CAAC,GAAGF,SAAS,CAACG,MAAM,CAAC,CAAC;AAChE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}