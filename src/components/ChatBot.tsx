import React, { useState } from 'react';

interface ChatBotProps {
  isOpen: boolean;
  onToggle: () => void;
}

interface Message {
  id: number;
  message: string;
  type: 'user' | 'bot';
  timestamp: Date;
}

const ChatBot: React.FC<ChatBotProps> = ({ isOpen, onToggle }) => {
  const [messages, setMessages] = useState<Message[]>([
    { 
      id: 1, 
      message: "Hello! I'm your Ops Co-Pilot. I can help you with:\n\nâ€¢ ðŸ“Š Analyze pod performance\nâ€¢ ðŸš¨ Identify critical issues\nâ€¢ ðŸ’¡ Suggest actions\nâ€¢ ðŸ“ˆ Explain metrics\n\nWhat would you like to know?", 
      type: 'bot',
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');

  // Quick action suggestions
  const quickActions = [
    { text: "Show me critical pods", icon: "ðŸš¨" },
    { text: "What actions should I take?", icon: "ðŸ’¡" },
    { text: "Explain O2HAR metric", icon: "ðŸ“Š" },
    { text: "How to improve performance?", icon: "ðŸ“ˆ" }
  ];

  const generateContextualResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase();
    
    if (message.includes('critical') || message.includes('breaching') || message.includes('urgent')) {
      return "ðŸš¨ **Critical Issues Detected:**\n\nBased on current data, I can see several pods are breaching thresholds. Here's what you should do:\n\n1. **Immediate Actions:**\n   â€¢ Call DEs for breaching pods\n   â€¢ Increase surge pricing for high O2HAR pods\n   â€¢ Contact pod owners for urgent issues\n\n2. **Priority Order:**\n   â€¢ Focus on pods with both O2HAR and Unserviceability breaches\n   â€¢ Then address single metric breaches\n   â€¢ Finally, monitor pods approaching thresholds\n\nWould you like me to show you specific pod details?";
    }
    
    if (message.includes('o2har') || message.includes('order to hand')) {
      return "ðŸ“Š **O2HAR (Order to Handover Average Response) Explained:**\n\n**What it is:** Time from order placement to delivery partner handover\n\n**Current Threshold:** 9.0 minutes\n\n**Why it matters:**\nâ€¢ Affects customer satisfaction\nâ€¢ Impacts delivery efficiency\nâ€¢ Influences partner earnings\n\n**Common causes of high O2HAR:**\nâ€¢ Low DE availability\nâ€¢ High order volume\nâ€¢ Restaurant delays\nâ€¢ System issues\n\n**Quick fixes:**\nâ€¢ Increase surge pricing\nâ€¢ Call more DEs\nâ€¢ Optimize restaurant coordination";
    }
    
    if (message.includes('unserviceability') || message.includes('service')) {
      return "ðŸ“Š **Unserviceability Explained:**\n\n**What it is:** Percentage of orders that cannot be fulfilled due to lack of delivery partners\n\n**Current Threshold:** 5.0%\n\n**Why it matters:**\nâ€¢ Lost revenue opportunities\nâ€¢ Poor customer experience\nâ€¢ Partner dissatisfaction\n\n**Common causes:**\nâ€¢ Insufficient DE coverage\nâ€¢ High demand spikes\nâ€¢ Partner churn\nâ€¢ Zone imbalances\n\n**Quick fixes:**\nâ€¢ Activate backup DEs\nâ€¢ Increase incentives\nâ€¢ Optimize zone coverage";
    }
    
    if (message.includes('action') || message.includes('what should') || message.includes('help')) {
      return "ðŸ’¡ **Recommended Actions Based on Current Data:**\n\n**For High O2HAR Pods:**\nâ€¢ Increase surge pricing by 15-20%\nâ€¢ Call Full-time DEs (FT1+ ULTRA, FT2)\nâ€¢ Activate Reactivations cohort\n\n**For High Unserviceability Pods:**\nâ€¢ Call Part-time DEs and Floaters\nâ€¢ Increase base incentives\nâ€¢ Optimize zone coverage\n\n**For Critical Pods (Both metrics breached):**\nâ€¢ Immediate DE callout\nâ€¢ Maximum surge pricing\nâ€¢ Escalate to city owner\nâ€¢ Monitor hourly progress\n\n**Proactive Measures:**\nâ€¢ Set up alerts for threshold breaches\nâ€¢ Regular DE engagement\nâ€¢ Performance trend analysis";
    }
    
    if (message.includes('improve') || message.includes('better') || message.includes('optimize')) {
      return "ðŸ“ˆ **Performance Improvement Strategies:**\n\n**Short-term (0-2 hours):**\nâ€¢ Immediate DE callouts\nâ€¢ Surge pricing adjustments\nâ€¢ Emergency partner activation\n\n**Medium-term (2-24 hours):**\nâ€¢ Partner engagement programs\nâ€¢ Zone optimization\nâ€¢ Restaurant coordination\nâ€¢ Incentive structure review\n\n**Long-term (1-7 days):**\nâ€¢ Partner retention programs\nâ€¢ Technology improvements\nâ€¢ Process optimization\nâ€¢ Training and development\n\n**Key Metrics to Monitor:**\nâ€¢ DE login rates\nâ€¢ Order acceptance rates\nâ€¢ Partner satisfaction scores\nâ€¢ Customer feedback";
    }
    
    if (message.includes('surge') || message.includes('pricing')) {
      return "ðŸ’° **Surge Pricing Strategy:**\n\n**When to increase surge:**\nâ€¢ O2HAR > 9.0 minutes\nâ€¢ High order volume\nâ€¢ Low DE availability\nâ€¢ Peak hours\n\n**Recommended increases:**\nâ€¢ **FT1+ ULTRA:** â‚¹22 â†’ â‚¹26 (+18%)\nâ€¢ **FT2:** â‚¹20 â†’ â‚¹24 (+20%)\nâ€¢ **NEW_SSU:** â‚¹18 â†’ â‚¹22 (+22%)\nâ€¢ **Others:** â‚¹18 â†’ â‚¹20 (+11%)\n\n**Implementation:**\nâ€¢ Start with 15% increase\nâ€¢ Monitor for 30 minutes\nâ€¢ Adjust based on response\nâ€¢ Communicate to partners\n\n**Best practices:**\nâ€¢ Gradual increases work better\nâ€¢ Communicate changes clearly\nâ€¢ Monitor partner feedback\nâ€¢ Have rollback plan ready";
    }
    
    if (message.includes('de') || message.includes('delivery') || message.includes('partner')) {
      return "ðŸ‘¥ **DE (Delivery Executive) Management:**\n\n**Cohort Types:**\nâ€¢ **FT1+ ULTRA:** Most reliable, highest capacity\nâ€¢ **FT2:** Full-time, consistent availability\nâ€¢ **NEW_SSU:** New partners, need support\nâ€¢ **OLD_SSU:** Experienced, stable\nâ€¢ **REACTIVATIONS:** Returning partners\nâ€¢ **FT/PT:** Flexible availability\nâ€¢ **Floaters:** On-demand support\n\n**Callout Strategy:**\nâ€¢ **Critical pods:** Call all cohorts\nâ€¢ **High O2HAR:** Focus on FT cohorts\nâ€¢ **High Unserviceability:** Activate PT and Floaters\nâ€¢ **Normal operations:** Regular engagement\n\n**Incentive Structure:**\nâ€¢ Base + Performance bonuses\nâ€¢ Peak hour incentives\nâ€¢ Loyalty programs\nâ€¢ Recognition rewards";
    }
    
    return "I'm here to help with your operations questions! You can ask me about:\n\nâ€¢ ðŸ“Š **Metrics:** O2HAR, Unserviceability explanations\nâ€¢ ðŸš¨ **Issues:** Critical pod identification and actions\nâ€¢ ðŸ’¡ **Actions:** Recommended steps for improvement\nâ€¢ ðŸ“ˆ **Strategy:** Performance optimization tips\nâ€¢ ðŸ’° **Pricing:** Surge pricing strategies\nâ€¢ ðŸ‘¥ **Partners:** DE management and callouts\n\nWhat specific aspect would you like to explore?";
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: messages.length + 1,
      message: inputMessage,
      type: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');

    // Generate contextual response
    setTimeout(() => {
      const botResponse = generateContextualResponse(inputMessage);
      const botMessage: Message = {
        id: messages.length + 2,
        message: botResponse,
        type: 'bot',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, botMessage]);
    }, 1000);
  };

  const handleQuickAction = (action: string) => {
    setInputMessage(action);
    handleSendMessage();
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSendMessage();
    }
  };

  if (!isOpen) {
    return (
      <button
        onClick={onToggle}
        className="fixed bottom-6 right-6 w-16 h-16 bg-accent-500 text-white rounded-xl shadow-large hover:shadow-soft hover:scale-110 transition-all duration-300 flex items-center justify-center text-2xl z-50"
      >
        ðŸ’¬
      </button>
    );
  }

  return (
    <div className="fixed bottom-6 right-6 w-96 h-[600px] bg-dark-card border border-dark-border rounded-xl shadow-large flex flex-col z-50">
      {/* Header */}
      <div className="bg-accent-500 text-white p-4 rounded-t-xl flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
            <span className="text-sm">ðŸ¤–</span>
          </div>
          <div>
            <h3 className="font-bold">Ops Co-Pilot</h3>
            <p className="text-xs opacity-80">AI Assistant</p>
          </div>
        </div>
        <button
          onClick={onToggle}
          className="text-white hover:text-white/80 transition-colors hover:bg-white/20 p-1 rounded-lg"
        >
          âœ•
        </button>
      </div>

      {/* Messages */}
      <div className="flex-1 p-4 overflow-y-auto space-y-3">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
          >
            <div
              className={`max-w-xs px-4 py-3 rounded-xl text-sm shadow-soft whitespace-pre-line ${
                message.type === 'user'
                  ? 'bg-accent-500 text-white'
                  : 'bg-dark-hover text-white'
              }`}
            >
              {message.message}
              <div className={`text-xs mt-2 ${message.type === 'user' ? 'text-white/70' : 'text-gray-400'}`}>
                {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Quick Actions */}
      {messages.length === 1 && (
        <div className="px-4 pb-2">
          <p className="text-xs text-gray-400 mb-2">Quick actions:</p>
          <div className="flex flex-wrap gap-2">
            {quickActions.map((action, index) => (
              <button
                key={index}
                onClick={() => handleQuickAction(action.text)}
                className="text-xs bg-dark-hover text-white px-3 py-2 rounded-lg hover:bg-dark-border transition-colors flex items-center space-x-1"
              >
                <span>{action.icon}</span>
                <span>{action.text}</span>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Input */}
      <div className="p-4 border-t border-dark-border">
        <div className="flex space-x-3">
          <input
            type="text"
            value={inputMessage}
            onChange={(e) => setInputMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder="Ask me anything..."
            className="flex-1 px-4 py-3 border border-dark-border bg-dark-hover rounded-xl focus:outline-none focus:ring-2 focus:ring-accent-500 focus:border-transparent placeholder-gray-400 text-white"
          />
          <button
            onClick={handleSendMessage}
            className="px-4 py-3 bg-accent-500 text-white rounded-xl hover:shadow-medium transition-all duration-200 font-medium hover:scale-105"
          >
            Send
          </button>
        </div>
      </div>
    </div>
  );
};

export default ChatBot; 